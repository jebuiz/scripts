openapi: 3.0.3
info:
  version: '3'
  title: Data Plans
  description: The Data Plans API manages plans created by the SAS Data Studio application.
  contact:
    name: SAS Developers
    url: https://developer.sas.com
    email: devex@sas.com
tags:
- name: Root
  description: Contains the operations for the root resource.
- name: Plans
  description: Contains the operations for the plans collection.
- name: Plan
  description: Contains the operations for a plan resource.
- name: Transfer
  description: Contains the operations supporting the transfer resource.
- name: Relationships
  description: Contains the operations supporting the relationships resource.
- name: Job Execution
  description: Contains the operations supporting execution for a plan resource.
paths:
  /:
    get:
      summary: Get a list of top-level links
      description: Returns a list of links to the top-level collections surfaced through
        this API.  HEAD is also supported and returns status and headers only.
      operationId: root
      tags:
      - Root
      responses:
        '200':
          description: The request succeeded.
          headers:
            Content-Type:
              schema:
                type: string
                enum:
                - application/json
          content:
            application/vnd.sas.api+json:
              schema:
                $ref: '#/components/schemas/api'
            application/json:
              schema:
                $ref: '#/components/schemas/api'
    head:
      summary: Get header information for the service
      description: Retrieves header information for the service. It can also be used
        to verify that the service is available.
      operationId: headersForRoot
      tags:
      - Root
      responses:
        '200':
          description: The request succeeded. The service is available.
          headers:
            Content-Type:
              schema:
                type: string
                enum:
                - application/json
          content:
            application/vnd.sas.api+json:
              schema:
                $ref: '#/components/schemas/api'
            application/json:
              schema:
                $ref: '#/components/schemas/api'
  /plans:
    get:
      tags:
      - Plans
      summary: Get a list of plans
      description: 'Returns a list of plans. Standard paging, filtering, and sorting
        options are supported. The returned collection items are of type application/vnd.sas.data.plan.summary
        unless an alternative is specified with the Accept-Item header.

        '
      operationId: getPlans
      parameters:
      - name: Accept-Item
        in: header
        description: The desired item representation. The default is application/vnd.sas.data.plan.summary+json.
        schema:
          type: string
          enum:
          - application/vnd.sas.data.plan.summary+json
          - application/vnd.sas.data.plan+json
          - application/vnd.sas.search.indexable.data+json
          - application/vnd.sas.summary+json
      - name: start
        in: query
        description: The index of the first plans to return. The default value is
          0.
        schema:
          type: integer
      - name: limit
        in: query
        description: The maximum number of plans to return. The default value is 10.
        schema:
          type: integer
      - name: filter
        in: query
        description: The criteria for filtering the plans. You can filter by name,
          id, creationTimeStamp, modifiedTimeStamp, modifiedBy, and createdBy. See
          [Filtering in REST APIs](https://developer.sas.com/apis/rest/Topics/#filters).
        schema:
          type: string
          format: string
      - name: sortBy
        in: query
        description: The criteria for sorting the plans. See [Sorting in REST APIs](https://developer.sas.com/apis/rest/Topics/#sorting).
        schema:
          type: string
          format: sort-criteria
      responses:
        '200':
          description: The request succeeded.
          headers:
            Content-Type:
              schema:
                type: string
                enum:
                - application/vnd.sas.collection+json
          content:
            application/vnd.sas.collection+json:
              schema:
                $ref: '#/components/schemas/planCollection'
            application/json:
              schema:
                $ref: '#/components/schemas/planCollection'
        '400':
          description: The request was invalid.
          content:
            application/vnd.sas.collection+json:
              schema:
                $ref: '#/components/schemas/error2'
            application/json:
              schema:
                $ref: '#/components/schemas/error2'
    post:
      tags:
      - Plans
      summary: Create a plan
      description: Creates a new plan. Only the user definition of the name, description,
        and content properties are supported. Supports creation of plans in folders
        using the parentFolderUri query parameter. The returned object is of type
        application/vnd.sas.data.plan by default.
      operationId: createPlans
      parameters:
      - name: parentFolderUri
        in: query
        description: The URI of the parent folder to contain the plan.
        schema:
          type: string
      requestBody:
        content:
          application/vnd.sas.data.plan+json:
            schema:
              $ref: '#/components/schemas/plan'
          application/json:
            schema:
              $ref: '#/components/schemas/plan'
        description: The plan to be stored in the service. Only name, description,
          and content are saved from the input. All other values are set by the service.
        required: true
      responses:
        '201':
          description: A resource was created. The plan was created.
          headers:
            ETag:
              description: A tag that identifies this revision of this object.
              schema:
                type: string
            Last-Modified:
              description: The time stamp in `EEE, dd MMM yyyy HH:mm:ss GMT` format
                when the plan was last modified.
              schema:
                type: string
            Location:
              description: The URL of the plan.
              schema:
                type: string
                format: uri
          content:
            application/vnd.sas.data.plan+json:
              schema:
                $ref: '#/components/schemas/plan'
            application/vnd.sas.data.plan.summary+json:
              schema:
                $ref: '#/components/schemas/plan'
            application/json:
              schema:
                $ref: '#/components/schemas/plan'
        '400':
          description: The plan could not be created because the request was invalid.
  /plans#transfer:
    post:
      tags:
      - Transfer
      summary: Create a plan from a transfer object
      description: Creates a new plan from a transfer object. This should not be used
        directly. See [Transfer API](/apis/transfer/v2/swagger.yaml) for usage.
      operationId: createPlanFromTransfer
      parameters:
      - name: parentFolderUri
        in: query
        description: The uri of parent folder to contain plan.
        schema:
          type: string
      requestBody:
        content:
          application/vnd.sas.transfer.object+json:
            schema:
              $ref: '#/components/schemas/transferObject'
        description: Transfer object representing the plan to be stored in the service.
        required: true
      responses:
        '201':
          description: A resource was created. The plan was created.
          headers:
            ETag:
              description: A tag that identifies this revision of this object.
              schema:
                type: string
            Last-Modified:
              description: The time stamp in `EEE, dd MMM yyyy HH:mm:ss GMT` format
                when the plan was last modified.
              schema:
                type: string
            Location:
              description: The URL of the plan.
              schema:
                type: string
          content:
            application/vnd.sas.transfer.import.summary+json:
              schema:
                $ref: '#/components/schemas/importSummary'
            application/json:
              schema:
                $ref: '#/components/schemas/importSummary'
        '400':
          description: The plan could not be created because the request was invalid.
  /plans/{planId}:
    get:
      tags:
      - Plan
      summary: Get a plan
      description: Returns the plan specified by the provided plan ID.
      operationId: getPlan
      parameters:
      - name: planId
        in: path
        description: The ID of the plan.
        required: true
        schema:
          type: string
      responses:
        '200':
          description: The request succeeded.
          headers:
            ETag:
              description: The entity tag for the plan.
              schema:
                type: string
            Last-Modified:
              description: The time stamp in `EEE, dd MMM yyyy HH:mm:ss GMT` format
                when the plan was last modified.
              schema:
                type: string
          content:
            application/vnd.sas.data.plan.summary+json:
              schema:
                $ref: '#/components/schemas/plan'
            application/vnd.sas.data.plan+json:
              schema:
                $ref: '#/components/schemas/plan'
            application/vnd.sas.search.indexable.data+json:
              schema:
                $ref: '#/components/schemas/plan'
            application/vnd.sas.summary+json:
              schema:
                $ref: '#/components/schemas/plan'
            application/vnd.sas.transfer.object+json:
              schema:
                $ref: '#/components/schemas/plan'
            application/json:
              schema:
                $ref: '#/components/schemas/plan'
        '404':
          description: No plan exists at the requested path.
          content:
            application/vnd.sas.error+json:
              schema:
                $ref: '#/components/schemas/error2'
    head:
      tags:
      - Plan
      summary: Get headers for the plan
      description: Retrieve headers for a plan. Can also be used to check if a plan
        exists.
      operationId: headersForPlan
      parameters:
      - name: planId
        in: path
        description: The ID of the plan.
        required: true
        schema:
          type: string
      responses:
        '200':
          description: The request succeeded.
          headers:
            ETag:
              description: The entity tag for the plan.
              schema:
                type: string
            Last-Modified:
              description: The time stamp in `EEE, dd MMM yyyy HH:mm:ss GMT` format
                when the plan was last modified.
              schema:
                type: string
        '404':
          description: No plan exists at the requested path.
    put:
      tags:
      - Plan
      summary: Update a plan
      description: Updates the plan with the provided plan ID. The ETag provided by
        the If-Match header is verified before the update occurs. Name, description,
        and content are saved from the request, and modifiedBy and modifedTimeStamp
        are set by the service.
      operationId: updatePlan
      parameters:
      - name: planId
        in: path
        description: The ID of the plan.
        required: true
        schema:
          type: string
      - name: If-Match
        in: header
        required: true
        description: The entity tag obtained from the most recent `ETag` response
          header. Must match the current entity tag for the plan.
        schema:
          type: string
      requestBody:
        content:
          application/vnd.sas.data.plan+json:
            schema:
              $ref: '#/components/schemas/updatePlan'
          application/json:
            schema:
              $ref: '#/components/schemas/updatePlan'
        description: The new plan value.
        required: true
      responses:
        '200':
          description: The request succeeded.
          headers:
            ETag:
              description: The entity tag for the plan.
              schema:
                type: string
            Last-Modified:
              description: The time stamp in `EEE, dd MMM yyyy HH:mm:ss GMT` format
                when the plan was last modified.
              schema:
                type: string
          content:
            application/vnd.sas.data.plan+json:
              schema:
                $ref: '#/components/schemas/plan'
            application/vnd.sas.data.plan.summary+json:
              schema:
                $ref: '#/components/schemas/plan'
            application/json:
              schema:
                $ref: '#/components/schemas/plan'
        '400':
          description: The plan could not be updated because the request was invalid.
          content:
            application/vnd.sas.error+json:
              schema:
                $ref: '#/components/schemas/error2'
        '404':
          description: No plan exists at the requested path.
          content:
            application/vnd.sas.error+json:
              schema:
                $ref: '#/components/schemas/error2'
        '412':
          description: The `If-Match` request header did not match the resource's
            entity tag, or the `If-Unmodified-Since` request header did not match
            the resource's last modified timestamp.
          content:
            application/vnd.sas.error+json:
              schema:
                $ref: '#/components/schemas/error2'
        '428':
          description: The request headers did not include an `If-Match` or `If-Unmodified-Since`
            precondition. The ETag was not provided when updating an existing type.
          content:
            application/vnd.sas.error+json:
              schema:
                $ref: '#/components/schemas/error2'
    delete:
      tags:
      - Plan
      summary: Delete a plan
      description: Deletes the plan with the provided plan ID.
      operationId: deletePlan
      parameters:
      - name: planId
        in: path
        description: The ID of the plan.
        required: true
        schema:
          type: string
      responses:
        '204':
          description: The plan was deleted.
  /plans/{planId}#transfer:
    put:
      tags:
      - Transfer
      summary: Update a plan from the transfer object
      description: 'Updates the plan with the provided plan ID to match the content
        of the provided transfer object. If the plan does not exist, it is created.
        ETag verification is not performed on this action. This should not be used
        directly. See [Transfer API](/apis/transfer/v2/swagger.yaml) for usage.

        '
      operationId: updatePlanFromTransfer
      parameters:
      - name: planId
        in: path
        description: The ID of the plan.
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/vnd.sas.transfer.object+json:
            schema:
              $ref: '#/components/schemas/transferObject'
        description: The new plan value.
        required: true
      responses:
        '200':
          description: The request succeeded. The plan was updated.
          headers:
            ETag:
              description: The entity tag for the plan.
              schema:
                type: string
            Last-Modified:
              description: The time stamp in `EEE, dd MMM yyyy HH:mm:ss GMT` format
                when the plan was last modified.
              schema:
                type: string
          content:
            application/vnd.sas.summary+json:
              schema:
                $ref: '#/components/schemas/summary'
        '201':
          description: A plan was created.
          headers:
            ETag:
              description: The entity tag for the plan.
              schema:
                type: string
            Last-Modified:
              description: The time stamp in `EEE, dd MMM yyyy HH:mm:ss GMT` format
                when the plan was last modified.
              schema:
                type: string
          content:
            application/vnd.sas.summary+json:
              schema:
                $ref: '#/components/schemas/summary'
        '400':
          description: The plan could not be updated because the request was invalid.
          content:
            application/vnd.sas.error+json:
              schema:
                $ref: '#/components/schemas/error2'
  /plans/{planId}/jobs:
    post:
      tags:
      - Job Execution
      summary: Create a Job Execution job based on a plan
      description: 'Creates a Job Request based on the plan and provided execution
        request resource and submits it to the Job Execution service, returning the
        created job.

        '
      operationId: createJobFromPlan
      parameters:
      - name: planId
        in: path
        description: The ID of the plan.
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/vnd.sas.data.plan.execution.request+json:
            schema:
              $ref: '#/components/schemas/planExecutionRequest'
          application/json:
            schema:
              $ref: '#/components/schemas/planExecutionRequest'
        description: Parameters to be used in the job request.
      responses:
        '201':
          description: A job was created for the plan.
          headers:
            ETag:
              description: The entity tag for the job.
              schema:
                type: string
            Last-Modified:
              description: The time stamp in `EEE, dd MMM yyyy HH:mm:ss GMT` format
                when the job was last modified.
              schema:
                type: string
            Location:
              description: The URL of the job.
              schema:
                type: string
                format: uri
          content:
            application/vnd.sas.job.execution.job+json:
              schema:
                $ref: '#/components/schemas/job'
            application/json:
              schema:
                $ref: '#/components/schemas/job'
        '400':
          description: The job could not be created because the request was invalid.
        '404':
          description: No plan exists at the requested path.
  /jobs:
    post:
      tags:
      - Job Execution
      summary: Submit an execution job
      description: Submit a job that has been created by the Job Execution API.
      operationId: submitJob
      requestBody:
        content:
          application/vnd.sas.job.execution.job+json:
            schema:
              $ref: '#/components/schemas/job'
          application/json:
            schema:
              $ref: '#/components/schemas/job'
        description: Job that has been created by the Job Execution API to be executed
          by the provider.
        required: true
      responses:
        '201':
          description: The job execution was started.
          headers:
            Location:
              description: The URL of the job.
              schema:
                type: string
                format: uri
          content:
            application/vnd.sas.job.execution.job+json:
              schema:
                $ref: '#/components/schemas/job'
            application/json:
              schema:
                $ref: '#/components/schemas/job'
        '400':
          description: The job could not run because the request was invalid.
  /commons/relationships/plans/{planId}:
    get:
      tags:
      - Relationships
      summary: Get relationships for a plan
      description: Retrieve relationship information for the specified plan.
      operationId: getPlanRelationships
      parameters:
      - name: planId
        in: path
        description: The ID of the plan.
        required: true
        schema:
          type: string
      responses:
        '200':
          description: The request succeeded.
          headers:
            Content-Type:
              description: media type of the resource
              schema:
                type: string
          content:
            application/vnd.sas.collection+json:
              schema:
                $ref: '#/components/schemas/relationshipCollection'
            application/json:
              schema:
                $ref: '#/components/schemas/relationshipCollection'
        '404':
          description: No plan exists at the requested path.
          content:
            application/vnd.sas.error+json:
              schema:
                $ref: '#/components/schemas/error2'
    head:
      tags:
      - Relationships
      summary: Get headers for plan relationships
      description: Retrieve headers associated with the plan's relationships.
      operationId: headersForPlanRelationships
      parameters:
      - name: planId
        in: path
        description: The ID of the plan.
        required: true
        schema:
          type: string
      responses:
        '200':
          description: The request succeeded.
          headers:
            Content-Type:
              description: media type of the resource
              schema:
                type: string
            ETag:
              description: E-Tag for response
              schema:
                type: string
            Last-Modified:
              description: The time at which the plan was last updated.
              schema:
                type: string
        '404':
          description: No plan exists at the requested path.
servers:
- url: https://test.ingress-nginx.dm-os-zap-m1.dmmdev.sashq-d.openstack.sas.com/dataPlans
  description: mock server
components:
  schemas:
    createPlan:
      title: Create Plan
      description: A reduced representation of the plan containing only the properties
        used to create a new plan.
      properties:
        name:
          type: string
          description: The user-specified name of the plan.
        description:
          type: string
          description: The user-provided description of the plan.
        content:
          type: object
          description: The embedded content of the plan.
    updatePlan:
      title: Update Plan
      description: A reduced representation of the plan containing only the properties
        used to update an existing plan.
      allOf:
      - $ref: '#/components/schemas/createPlan'
      properties:
        id:
          type: string
          description: The ID of the plan to update. This is changed in an update,
            but is verified.
    planSummary:
      title: Plan Summary
      description: A summary representation of a plan containing the same metadata
        information but omitting content.
      properties:
        id:
          type: string
          description: The system-assigned ID of the plan.
        name:
          type: string
          description: The user-specified name of the plan.
        description:
          type: string
          description: The user-provided description of the plan.
        creationTimeStamp:
          type: string
          format: date-time
          description: The creation date of the plan.
        modifiedTimeStamp:
          type: string
          format: date-time
          description: The last modification date of the plan.
        createdBy:
          type: string
          description: The user ID of the user who created the plan.
        modifiedBy:
          type: string
          description: The user ID of the user who last modified the plan.
        links:
          type: array
          description: The links that apply to the plan.
          items:
            $ref: '#/components/schemas/link'
        version:
          type: integer
          description: The version of the resource. This is version 1.
    plan:
      title: Plan
      description: The full representation of a plan object with all metadata and
        content.
      allOf:
      - $ref: '#/components/schemas/planSummary'
      properties:
        content:
          type: object
          description: The embedded content of the plan.
    planCollection:
      title: Plan Collection
      description: A collection of plan representations.
      type: object
      allOf:
      - $ref: '#/components/schemas/baseCollection2'
      - type: object
        required:
        - items
        properties:
          items:
            type: array
            items:
              $ref: '#/components/schemas/planSummary'
            description: Array containing plan resources.
    planExecutionRequest:
      title: Plan Execution Request
      description: A collection of values used to provide the job execution request
        arguments applicable to a plan.
      type: object
      properties:
        generateCodeOnly:
          type: boolean
          description: Specifies that the job should run only code generation tasks,
            skipping execution. Default value is false.
        loadTableEnabled:
          type: boolean
          description: Specifies that the job should attempt to load any unloaded
            input tables when executing. Default value is true.
        jobExpiration:
          type: string
        outputTablePromotionEnabled:
          type: boolean
          description: Specifies if the the output table should be promoted to global
            scope. Default value is true.
        sessionGenerationEnabled:
          type: boolean
          description: Specifies that the job should create a new session in the runtime
            environment for execution. Default value is true.
    relationshipCollection:
      title: Plan Relationship Collection
      description: The collection of relationships for a plan.
      type: object
      allOf:
      - $ref: '#/components/schemas/baseCollection2'
      - type: object
        required:
        - items
        properties:
          items:
            type: array
            items:
              $ref: '#/components/schemas/relationship'
            description: Array containing relationship resources.
    transferObject:
      title: Transfer Object
      description: The transfer object that represents a plan.
      properties:
        id:
          type: string
          format: object-id
          description: The unique identifier of the object.
        version:
          type: integer
          description: This media type's schema version number. This representation
            is version 1.
        summary:
          $ref: '#/components/schemas/summary'
        content:
          type: object
          description: Optional. Choose this or fileServiceContent. This is the content
            object that must be serialized in a format that is valid for internet
            transmission. This includes valid encoding formats like Base64 or data
            structures like JSON. This is provided by the content provider and the
            transfer service expects no visibility into or understanding of this value.
        fileServiceContent:
          type: string
          description: Optional. Choose this or content. This holds the URI of a file
            service object that contains the transferrable object.
        connectors:
          type: array
          description: A list of associations or references to other external objects
            to be recreated on import.
          items:
            $ref: '#/components/schemas/transferObjectConnector'
        substitutions:
          type: object
          description: Map with keys of parameter and value. Used to replace the value
            of parameter with the value of value.
          additionalProperties:
            type: string
        links:
          type: array
          description: Paging links that apply to this object.
          items:
            $ref: '#/components/schemas/link'
    transferObjectConnector:
      title: Transfer Object Connector
      description: An association or reference to another external object to be recreated
        on import.
      properties:
        id:
          type: string
          format: object-id
          description: The unique identifier of the object.
        name:
          type: string
          description: The name of the related object.
        version:
          type: integer
          description: The transfer object connector version.
        uri:
          type: string
          description: The URI of the related object.
        contentType:
          type: string
          description: The media type of the related object.
        type:
          type: string
          description: The type of connection. This can be any value that the creator
            of the connection wants but should be used to determine what to do to
            reconstitute the relationship.
        hints:
          type: array
          description: Hints that can be used to help find the object to connect to
            in the target system.
          items:
            type: string
    relationship:
      title: Relationship Resource
      description: Represents a single relationship.
      properties:
        id:
          type: string
          description: System-assigned unique ID for this object.
        resourceUri:
          type: string
          description: The URI of the subject resource of this relationship.
          format: uri
        referenceId:
          type: string
          description: The ID of the reference for the subject resource.
        type:
          type: string
          description: The ID of this relationship type.
        relatedResourceUri:
          type: string
          description: The URI of the related resource of this relationship.
          format: uri
        relatedReferenceId:
          type: string
          description: The ID of the reference for the related resource.
        source:
          type: string
          description: The source of this relationship. Typically, the URI of the
            resource that manages this relationship.
          format: uri
        version:
          type: integer
          description: This media type's schema version number. This representation
            is version 1.
        creationTimeStamp:
          type: string
          format: date-time
          readOnly: true
          description: Timestamp of relationship creation.
        modifiedTimeStamp:
          type: string
          format: date-time
          readOnly: true
          description: Timestamp of last relationship modification.
        createdBy:
          type: string
          description: The ID of the user who created the relationship.
        modifiedBy:
          type: string
          description: The ID of the last user who modified the relationship.
        links:
          type: array
          description: Links that apply to this object.  If the provider is read only,  the
            links include "self".  If the provider is not read only, the links include
            "self", "delete", "update".
          items:
            $ref: '#/components/schemas/link'
    importSummary:
      description: Import Summary
      properties:
        id:
          type: string
          description: The ID String value of the object that was created/updated
            during the import.
        name:
          type: string
          description: The name String value of the object that was created/updated
            during the import.
        state:
          type: string
          description: The State of the import operations.
        resultUri:
          type: string
          description: The resource URI of the object created/updated during the import.
        type:
          type: string
          description: The type of the object.
    baseCollection2:
      title: Base Collection
      description: This is a base schema used to define paginated collections of resources.
        This base schema is extended by other schemas in APIs by adding an 'items'
        array property. These extensions define the application/vnd.sas.collection
        media type (version 2)
      properties:
        name:
          type: string
          description: The name of the collection.
        start:
          type: integer
          description: The zero-based index of the first item in the collection.
          format: int64
        limit:
          type: integer
          description: The number of items that were requested for the collection.
        count:
          type: integer
          description: If populated indicates the number of items in the collection.
          format: int64
        accept:
          type: string
          description: A space-delimited list of media types from which an `Accept`
            header may be constructed.
        links:
          type: array
          description: The links that apply to the collection.
          items:
            $ref: '#/components/schemas/link'
        version:
          type: integer
          description: The version number of the collection representation. This representation
            is version 2.
    error2:
      title: Error
      type: object
      description: The representation of an error.
      x-sas-media-type:
        name: application/vnd.sas.error
        version: 2
      required:
      - httpStatusCode
      - version
      properties:
        message:
          type: string
          description: The message for the error.
        id:
          type: string
          description: The string ID for the error.
        errorCode:
          type: integer
          description: The numeric ID for the error.
        httpStatusCode:
          type: integer
          description: The HTTP status code for the error.
        details:
          type: array
          description: Messages that provide additional details about the cause of
            the error.
          items:
            type: string
        remediation:
          type: string
          description: A message that describes how to resolve the error.
        errors:
          type: array
          description: Any additional errors that occurred.
          items:
            $ref: '#/components/schemas/error2'
        links:
          type: array
          description: The links that apply to the error.
          items:
            $ref: '#/components/schemas/link'
        version:
          type: integer
          description: The version number of the error representation. This representation
            is version 2.
    summary:
      title: Resource Summary
      type: object
      description: The summarized representation of a resource. Often used in collection
        responses when more specific details aren't needed.
      x-sas-media-type:
        name: application/vnd.sas.summary
        version: 1
      required:
      - id
      - links
      - version
      properties:
        id:
          type: string
          description: The unique identifier for the resource.
        name:
          type: string
          description: The name of the resource.
        type:
          type: string
          description: The type of the resource.
        description:
          type: string
          description: The description of the resource.
        createdBy:
          type: string
          description: The user who created the resource.
        creationTimeStamp:
          type: string
          format: date-time
          description: The timestamp in YYYY-MM-DDThh:mm:ss.sssZ format when the resource
            was created.
        modifiedBy:
          type: string
          description: The user who most recently modified the resource.
        modifiedTimeStamp:
          type: string
          format: date-time
          description: The timestamp in YYYY-MM-DDThh:mm:ss.sssZ format when the resource
            was last modified.
        links:
          type: array
          description: The links that apply to the resource.
          items:
            $ref: '#/components/schemas/link'
        version:
          type: integer
          description: The version number of the resource. This representation is
            version 1.
    job:
      title: Job
      description: The execution job.
      x-sas-media-type:
        name: application/vnd.sas.job.execution.job
        version: 1
      required:
      - id
      properties:
        version:
          type: number
          description: The version number of the representation. The current version
            is 2.
        id:
          type: string
          description: The unique identifier that is generated by the API.
        state:
          type: string
          description: 'The current state of the job. Valid values: pending, running,
            canceled, completed, failed, timedOut'
        results:
          type: object
          description: The output results of the job execution (map of String, String).
        error:
          $ref: '#/components/schemas/error2'
        jobRequest:
          $ref: '#/components/schemas/request'
        heartbeatInterval:
          type: integer
          format: int32
          description: The interval in seconds that the `heartbeatTimeStamp` should
            be updated by the provider or the job times out. The value for the `heatbeatInterval`
            is 0 when there is no heartbeat.
        heartbeatTimeStamp:
          description: The timestamp for when the last heartbeat was received, in
            the format of `YYYY-MM-DDThh:mm:ss.sssZ`.
          type: string
        creationTimeStamp:
          description: The timestamp for when the job was created, in the format of
            `YYYY-MM-DDThh:mm:ss.sssZ`.
          type: string
        modifiedTimeStamp:
          description: The timestamp for when the job was last modified, in the format
            of `YYYY-MM-DDThh:mm:ss.sssZ`.
          type: string
        endTimeStamp:
          description: The timestamp for when the state of the job changed to completed
            or failed, in the format of `YYYY-MM-DDThh:mm:ss.sssZ`.
          type: string
        expirationTimeStamp:
          description: The timestamp for when the job expires and will be deleted
            by the Job Execution service, in the format of `YYYY-MM-DDThh:mm:ss.sssZ`.
            This is set by the service after the job has completed based on the value
            of the `expiresAfter` member of the job request.
          type: string
        createdBy:
          description: The ID of the user that created or submitted the job.
          type: string
        modifiedBy:
          description: The ID of the user that last modified the job.
          type: string
        links:
          type: array
          description: The links that are associated with the job.
          items:
            $ref: '#/components/schemas/link'
    link:
      title: Link
      type: object
      description: A link to a related operation or resource.
      required:
      - rel
      properties:
        method:
          type: string
          description: The HTTP method for the link.
        rel:
          type: string
          description: The relationship of the link to the resource.
        uri:
          type: string
          description: The relative URI for the link.
        href:
          type: string
          description: The URL for the link.
        title:
          type: string
          description: The title for the link.
        type:
          type: string
          description: The media type or link type for the link.
        itemType:
          type: string
          description: If this is a link to a container, `itemType` is the media type
            or link type for the items in the container.
        responseType:
          type: string
          description: The media type or link type of the response body for a `PUT`,
            `POST`, or `PATCH` operation.
        responseItemType:
          type: string
          description: The media type or link type of the items in the response body
            for a `PUT`, `POST`, or `PATCH` operation.
    api:
      title: API
      description: The list of links to top-level resources and operations available
        from the root of the API.
      x-sas-media-type:
        name: application/vnd.sas.api
        version: 1
      required:
      - version
      - links
      properties:
        version:
          type: integer
          description: The version number of the API representation. This is version
            1.
          minimum: 1
        links:
          description: The API's top-level links.
          type: array
          items:
            $ref: '#/components/schemas/link'
    request:
      title: Job Request
      description: The job request.
      x-sas-media-type:
        name: application/vnd.sas.job.execution.job.request
        version: 1
      required:
      - id
      properties:
        version:
          type: integer
          description: The version number of the representation. The current version
            is 2.
        id:
          type: string
          description: The unique identifier for the job.
        name:
          type: string
          description: The name of the job.
        description:
          type: string
          description: The description of the job.
        creationTimeStamp:
          description: The timestamp for when the job was created, in the format of
            `YYYY-MM-DDThh:mm:ss.sssZ`.
          type: string
        modifiedTimeStamp:
          description: The timestamp for when the job was last modified, in the format
            of `YYYY-MM-DDThh:mm:ss.sssZ`.
          type: string
        createdBy:
          description: The ID of the user that created or submitted the job.
          type: string
        modifiedBy:
          description: The ID of the user that last modified the job.
          type: string
        jobDefinitionUri:
          type: string
          description: The URI of the job definition that is to be executed.
        jobDefinition:
          type: object
          description: The definition of the job that is to be executed.
        expiresAfter:
          type: string
          description: The duration of time (in <a href="https://www.w3.org/TR/xmlschema-2/#duration"
            target="_blank">W3C XML duration format</a>) after the completion of the
            job when the job should be deleted by the Job Execution service.
        arguments:
          type: object
          description: The values of the arguments described in the job definition.
        properties:
          type: object
          description: The value of properties in the format of (map<string, string>)
            that contains name value pairs (map<name, value>). The maximum name value
            length is 100.
          additionalProperties:
            type: string
        links:
          type: array
          description: The links that are associated with the job.
          items:
            $ref: '#/components/schemas/link'
  examples: {}
